---
# tasks file for gns3

- name: Assert that a Desktop Environment is installed
  fail:
    msg: "You are attempting to install 'GNS3', but no Desktop Environment seems to be available"
  when: not desktop_environment_detected

- name: Add gns3 APT repository
  apt_repository:
    repo: ppa:gns3/ppa

- name: Add i386 Architecture
  command: dpkg --add-architecture i386
  when: ansible_architecture != 'i386'

- name: Let non root to use gns3
  debconf:
    name='ubridge'
    question='ubridge/install-setuid'
    vtype='boolean'
    value='true'

- name: Install the gns3 packages
  apt:
    name: "{{ gns3_packages }}"
    state: present
  vars:
    gns3_packages:
    - gns3-gui
    - gns3-server
    - gns3-iou

- name: Add the local user to the ubridge, libvirt and kvm groups
  user:
    name: "{{ ansible_user }}"
    append: yes
    groups: "{{ item }}"
  with_items:
    - libvirt
    - kvm
    - ubridge

# The two following tasks seem to fix a bug occurring in lightdm when no network
# is available (thus the service NetworkManager-wait-online.service takes longer
# than usual to terminate). In particular, without this fix, lightdm presents
# a black screen with a cursor blinking and it is necessary to switch to tty1 and
# back to tty7 to correctly display the desktop environment.
- name: Create a editable copy of the service unit corresponding to libvirtd
  copy:
    src: /lib/systemd/system/libvirtd.service
    dest: /etc/systemd/system/libvirtd.service
    remote_src: yes
    owner: root
    group: root
    mode: '0644'
    force: no

- name: Make libvirtd.target start after network-online.target
  lineinfile:
    path: /etc/systemd/system/libvirtd.service
    state: present
    regexp: '^After=network.target'
    line: 'After=network-online.target'

- name: Pull the network-multitool docker image
  docker_image:
    name: praqma/network-multitool
    source: pull

- name: Copy the README file
  copy:
    src: files/README_GNS3
    dest: /home/{{ ansible_user }}/Desktop
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'


- name: Download the binary file
  command: |
          curl -o /home/crownlabs/GNS3/images/IOS/c2691-advipservicesk9-mz.124-25c.bin
          https://owncloud.ipv6.polito.it:8080/index.php/s/OobvABlroRZcEWJ/download

- name: Unzip the file
  shell: unzip -p /home/crownlabs/GNS3/images/IOS/c2691-advipservicesk9-mz.124-25c.bin >  /home/crownlabs/GNS3/images/IOS/c2691-advipservicesk9-mz.124-25c.image
  ignore_errors: yes

- name: Remove the archive file
  file:
    path: /home/crownlabs/GNS3/images/IOS/c2691-advipservicesk9-mz.124-25c.bin
    state: absent

# The following two steps are used to start gns3 as a deamon

- name: Copy the gns3 service file
  copy:
    src: "{{ role_path }}/files/gns3.service"
    dest: /etc/systemd/system/gns3.service
    mode: '0755'

- name: Enable and start the gns3 service
  systemd:
    name: gns3
    state: started
    enabled: yes

- name: Copy JSON request file 
  copy:
    src: "{{ role_path }}/files/cisco-c2961.json"
    dest: /tmp/json_file.json
    mode: '0644'

- name: Create new template using GNS3 API
  command: sudo  curl -X POST "http://localhost:3080/v2/templates" -d @/tmp/json_file.json

- name: Remove JSON request file 
  file:
    path: /tmp/json_file.json
    state: absent

- name: Copy the README file
  copy:
    src: "{{ role_path }}/files/README_GNS3"
    dest: /home/{{ ansible_user }}/Desktop
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

